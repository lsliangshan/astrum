import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:riverpod/riverpod.dart';
import 'tables.dart';
import 'package:path/path.dart' as p;

// dart run build_runner watch

// Generated by drift_dev when running `build_runner build`
// flutter packages pub run build_runner watch
part 'database.g.dart';

LazyDatabase _openConnection() {
  // the LazyDatabase util lets us find the right location for the file async.
  return LazyDatabase(() async {
    // put the database file, called db.sqlite here, into the documents folder
    // for your app.
    // final dbFolder = await getExternalStorageDirectory();
    final dbFolder = await getApplicationDocumentsDirectory();
    print('>>>>>>> ${dbFolder.path}');
    // final file = File(p.join(dbFolder?.path ?? "", 'istudy.sqlite'));
    final file = File(p.join(dbFolder.path, 'astrum.sqlite'));
    // file.deleteSync();
    return NativeDatabase(file);
  });
}

// @DriftDatabase(tables: [Activities, Users], include: {'sql.drift'})
@DriftDatabase(tables: [Roles, Attachments], daos: [])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  // AppDatabase.forTesting(DatabaseConnection connection)
  //     : super.connect(connection);

  @override
  int get schemaVersion => 1;

  @override
  MigrationStrategy get migration {
    return MigrationStrategy(
      onUpgrade: ((m, from, to) async {
        // if (from == 1) {
        //   // The todoEntries.dueDate column was added in version 2.
        //   // await m.addColumn(activities, activities.createat);
        //   await m.addColumn(tokens, tokens.username);
        // }
      }),
      beforeOpen: (OpeningDetails details) async {
        // Make sure that foreign keys are enabled
        // await customStatement('PRAGMA foreign_keys = ON');

        if (details.wasCreated) {}
      },
    );
  }

  static Provider<AppDatabase> provider = Provider((ref) {
    final database = AppDatabase();
    ref.onDispose(database.close);

    return database;
  });
}
